generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
  id                 Int              @id  @default(autoincrement())  @unique
  name               String           @db.VarChar(50)
  email              String           @db.VarChar(45) @unique
  lastLogin          DateTime?        @default(now())
  lists              List[]
  sharedLists        SharedList[]
  itemsBought        ListItem[]
  friends            Friend[]         @relation("userFriends")
  friendOf           Friend[]         @relation("friendOfUser")
  sentRequests       FriendRequest[]  @relation("sentRequests")
  receivedRequests   FriendRequest[]  @relation("receivedRequests")
  createdShareGroups ShareGroup[]     @relation("userOwnedGroups") // Groups created by this user
  shareGroups        ShareGroup[]
}

model List {
  id          Int           @id  @default(autoincrement())  @unique
  name        String        @db.VarChar(45)
  description String?       @db.VarChar(100)
  userId      Int   
  user        User          @relation(fields: [userId], references: [id])
  items       ListItem[]
  shared      SharedList[]
}

model ListItem {
  id          Int           @id  @default(autoincrement())  @unique
  name        String        @db.VarChar(100)
  note        String?       @db.VarChar(200)
  link        String?       @db.Text
  price       Decimal?      @db.Decimal(10, 2)
  boughtById  Int?          
  boughtBy    User?         @relation(fields: [boughtById], references: [id])
  listId      Int   
  list        List          @relation(fields: [listId], references: [id])
}

model SharedList {
  id                Int     @id  @default(autoincrement())  @unique
  listId            Int   
  list              List    @relation(fields: [listId], references: [id])
  sharedEmail       String? @db.VarChar(45) // used to invite new users to wishlist
  sharedUserId      Int?   
  sharedUser        User?    @relation(fields: [sharedUserId], references: [id])
}

// NOTE: I track friends and requests separately to allow for requests to be sent to non-registered users
model Friend {
  userId       Int
  friendId     Int
  user         User @relation("userFriends", fields: [userId], references: [id])
  friend       User @relation("friendOfUser", fields: [friendId], references: [id])

  @@id([userId, friendId]) // Composite primary key
}

model FriendRequest {
  id          Int           @id @default(autoincrement())
  email       String        // The email address of the recipient (may or may not be registered)
  senderId    Int
  receiverId  Int?          // Nullable; only set if the user is already registered
  sender      User          @relation("sentRequests", fields: [senderId], references: [id])
  receiver    User?         @relation("receivedRequests", fields: [receiverId], references: [id])

  status      RequestStatus @default(PENDING) // Status of the friend request

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ShareGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  owner       User         @relation("userOwnedGroups", fields: [ownerId], references: [id])
  members     User[]       
}